<?php

namespace Angel\Document\Proxy\__CG__\Documents;

use Doctrine\ODM\MongoDB\Persisters\DocumentPersister;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ODM. DO NOT EDIT THIS FILE.
 */
class User extends \Documents\User implements \Doctrine\ODM\MongoDB\Proxy\Proxy
{
    private $__documentPersister__;
    public $__identifier__;
    public $__isInitialized__ = false;
    public function __construct(DocumentPersister $documentPersister, $identifier)
    {
        $this->__documentPersister__ = $documentPersister;
        $this->__identifier__ = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->__documentPersister__) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->__documentPersister__->load($this->__identifier__, $this) === null) {
                throw \Doctrine\ODM\MongoDB\DocumentNotFoundException::documentNotFound(get_class($this), $this->__identifier__);
            }
            unset($this->__documentPersister__, $this->__identifier__);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function isUsertypeValid($type)
    {
        $this->__load();
        return parent::isUsertypeValid($type);
    }

    public function setPassword($value)
    {
        $this->__load();
        return parent::setPassword($value);
    }

    public function isEmailValidated()
    {
        $this->__load();
        return parent::isEmailValidated();
    }

    public function isValidated()
    {
        $this->__load();
        return parent::isValidated();
    }

    public function isInValidatedList()
    {
        $this->__load();
        return parent::isInValidatedList();
    }

    public function addIdentityFrontDoc($filename, $angelname)
    {
        $this->__load();
        return parent::addIdentityFrontDoc($filename, $angelname);
    }

    public function addIdentityBackDoc($filename, $angelname)
    {
        $this->__load();
        return parent::addIdentityBackDoc($filename, $angelname);
    }

    public function getUserTypeInChinese()
    {
        $this->__load();
        return parent::getUserTypeInChinese();
    }

    public function isStartup()
    {
        $this->__load();
        return parent::isStartup();
    }

    public function isInvestor()
    {
        $this->__load();
        return parent::isInvestor();
    }

    public function addIdentityRefusedReason($reason)
    {
        $this->__load();
        return parent::addIdentityRefusedReason($reason);
    }

    public function getGuarantors()
    {
        $this->__load();
        return parent::getGuarantors();
    }

    public function addGuarantors(\Documents\Company $company, $guarantor_id)
    {
        $this->__load();
        return parent::addGuarantors($company, $guarantor_id);
    }

    public function removeGuarantor($guarantor_id)
    {
        $this->__load();
        return parent::removeGuarantor($guarantor_id);
    }

    public function addInvestedCompanies($company, $percent, $amount)
    {
        $this->__load();
        return parent::addInvestedCompanies($company, $percent, $amount);
    }

    public function hasAlreadyInvestedCompany($company_id)
    {
        $this->__load();
        return parent::hasAlreadyInvestedCompany($company_id);
    }

    public function addCategory(\Documents\Category $p)
    {
        $this->__load();
        return parent::addCategory($p);
    }

    public function clearCategory()
    {
        $this->__load();
        return parent::clearCategory();
    }

    public function updateCreatedAt()
    {
        $this->__load();
        return parent::updateCreatedAt();
    }

    public function updateUpdatedAt()
    {
        $this->__load();
        return parent::updateUpdatedAt();
    }

    public function __set($name, $value)
    {
        $this->__load();
        return parent::__set($name, $value);
    }

    public function __get($name)
    {
        $this->__load();
        return parent::__get($name);
    }

    public function toArray($deep = true, $all = true, $visited = array (
))
    {
        $this->__load();
        return parent::toArray($deep, $all, $visited);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'email', 'user_type', 'username', 'name', 'author', 'identity_type', 'identity_id', 'password', 'password_src', 'age', 'gender', 'salt', 'active_bln', 'email_validated_bln', 'validated_bln', 'admin_bln', 'wait_tobe_validate', 'profile_image', 'phone', 'address', 'ip', 'last_login', 'identity_front_doc', 'identity_back_doc', 'identity_refused_reason', 'invested_companies', 'category', 'count', 'like', 'attribute', 'id', 'created_at', 'updated_at');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->__documentPersister__) {
            $this->__isInitialized__ = true;
            $class = $this->__documentPersister__->getClassMetadata();
            $original = $this->__documentPersister__->load($this->__identifier__);
            if ($original === null) {
                throw \Doctrine\ODM\MongoDB\MongoDBException::documentNotFound(get_class($this), $this->__identifier__);
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->__documentPersister__, $this->__identifier__);
        }
        
    }
}